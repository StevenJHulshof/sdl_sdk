#include "GlobalObjectPool.h"

GlobalObjectPool::GlobalObjectPool():
	_maxPriority(0),
	_pResourceBuffer(NULL),
	_pRawStoneBuffer(NULL),
	_pRawWoodBuffer(NULL),
	_pUnitBuffer(NULL),
	_pWarriorBuffer(NULL)
{

}

GlobalObjectPool::~GlobalObjectPool()
{

}

void GlobalObjectPool::update(int offsetX, int offsetY)
{
	_maxPriority = 0;
	resetObjectBuffers();

	updatePool(_resourcePool, offsetX, offsetY, _pResourceBuffer);
	updatePool(_rawStonePool, offsetX, offsetY, _pRawStoneBuffer);
	updatePool(_rawWoodPool, offsetX, offsetY, _pRawWoodBuffer);
	updatePool(_unitPool, offsetX, offsetY, _pUnitBuffer);
	updatePool(_warriorPool, offsetX, offsetY, _pWarriorBuffer);
}

void GlobalObjectPool::render()
{
	int resourceIndex = _resourcePool.size() - 1;
	int rawStoneIndex = _rawStonePool.size() - 1;
	int rawWoodIndex = _rawWoodPool.size() - 1;
	int unitIndex = _unitPool.size() - 1;
	int warriorIndex = _warriorPool.size() - 1;

	for(int y = 0; y < GRID_Y; y++)
	{
		renderPool(_resourcePool, y, &resourceIndex);
		renderPool(_rawStonePool, y, &rawStoneIndex);
		renderPool(_rawWoodPool, y, &rawWoodIndex);
		renderPool(_unitPool, y, &unitIndex);
		renderPool(_warriorPool, y, &warriorIndex);
	}
}

void GlobalObjectPool::deleteAllPools()
{
	deletePool(_resourcePool);
	deletePool(_rawStonePool);
	deletePool(_rawWoodPool);
	deletePool(_unitPool);
	deletePool(_warriorPool);
}

void GlobalObjectPool::resetObjectBuffers()
{
	_pResourceBuffer = NULL;
	_pRawStoneBuffer = NULL;
	_pRawWoodBuffer = NULL;
	_pUnitBuffer = NULL;
	_pWarriorBuffer = NULL;
}

void GlobalObjectPool::setObjectBuffersMember(int memberType, bool value)
{
	switch(memberType)
	{
	case OBJECT_MEMBER_SELECTED:
		setObjectBuffersSelected(value);
		break;
	case OBJECT_MEMBER_HOVERED:
		setObjectBuffersHovered(value);
		break;
	default:
		break;
	}
}

void GlobalObjectPool::setObjectBuffersSelected(bool value)
{
	setObjectMember(_pResourceBuffer[OBJECT_MEMBER_SELECTED], &_pResourceBuffer[OBJECT_MEMBER_SELECTED]->_selected, value);
	setObjectMember(_pRawStoneBuffer[OBJECT_MEMBER_SELECTED], &_pRawStoneBuffer[OBJECT_MEMBER_SELECTED]->_selected, value);
	setObjectMember(_pRawWoodBuffer[OBJECT_MEMBER_SELECTED], &_pRawWoodBuffer->_selected, value);
	setObjectMember(_pUnitBuffer[OBJECT_MEMBER_SELECTED], &_pUnitBuffer[OBJECT_MEMBER_SELECTED]->_selected, value);
	setObjectMember(_pWarriorBuffer[OBJECT_MEMBER_SELECTED], &_pWarriorBuffer[OBJECT_MEMBER_SELECTED]->_selected, value);
}

void GlobalObjectPool::setObjectBuffersHovered(bool value)
{
	setObjectMember(_pResourceBuffer[OBJECT_MEMBER_HOVERED], &_pResourceBuffer[OBJECT_MEMBER_HOVERED]->_hovered, value);
	setObjectMember(_pRawStoneBuffer[OBJECT_MEMBER_HOVERED], &_pRawStoneBuffer[OBJECT_MEMBER_HOVERED]->_hovered, value);
	setObjectMember(_pRawWoodBuffer[OBJECT_MEMBER_HOVERED], &_pRawWoodBuffer[OBJECT_MEMBER_HOVERED]->_hovered, value);
	setObjectMember(_pUnitBuffer[OBJECT_MEMBER_HOVERED], &_pUnitBuffer[OBJECT_MEMBER_HOVERED]->_hovered, value);
	setObjectMember(_pWarriorBuffer[OBJECT_MEMBER_HOVERED], &_pWarriorBuffer[OBJECT_MEMBER_HOVERED]->_hovered, value);
}

GlobalObjectPool gGlobalObjectPool;
